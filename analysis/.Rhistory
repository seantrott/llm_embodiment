model,
"ViT-B/32" ~ "B/32",
"ViT-L/14" ~ "L/14",
"ViT-H/14" ~ "H/14",
"ImageBind" ~ "IB"
),
model = factor(model, levels=c("B/32","L/14","H/14","IB")),
y = case_when(
p_value < 0.05 ~ 0.78,
T ~ 0.8
)
)
# Initialize empty data frame to store summarized results
ttest_summary <- data.frame()
# Loop through each unique combination of model and dataset
for (model_name in unique(data$model)) {
for (dataset_name in unique(data$dataset)) {
# Subset the data
subset_data <- data %>%
filter(model == model_name, dataset == dataset_name)
# Run t-test
t_result <- t.test(probability ~ match, data = subset_data)
# Store the summarized t-test result in the data frame
ttest_summary <- rbind(ttest_summary, data.frame(
model = model_name,
dataset = dataset_name,
t_value = t_result$statistic,
p_value = t_result$p.value,
df = t_result$parameter
))
}
}
# View the summarized results
ttest_summary <- ttest_summary %>%
mutate(
model = factor(model, levels=c("ViT-B/32", "ViT-L/14", "ViT-H/14", "ImageBind")),
dataset = factor(dataset, levels=c("Shape", "Color", "Orientation"))
)
# Add a column for significance stars
ttest_summary$signif_star <- with(ttest_summary, ifelse(p_value < 0.001, '***',
ifelse(p_value < 0.01, '**',
ifelse(p_value < 0.05, '*', 'ns'))))
# Merge this significance data with your main dataset
data_with_signif <- merge(data, ttest_summary, by = c("model", "dataset"))
ttest_summary <- ttest_summary %>%
mutate(
model = case_match(
model,
"ViT-B/32" ~ "B/32",
"ViT-L/14" ~ "L/14",
"ViT-H/14" ~ "H/14",
"ImageBind" ~ "IB"
),
model = factor(model, levels=c("B/32","L/14","H/14","IB")),
y = case_when(
p_value < 0.05 ~ 0.78,
T ~ 0.8
)
)
# Plot probability vs match for each model, faceted by dataset
data_with_signif %>%
mutate(
model = case_match(
model,
"ViT-B/32" ~ "B/32",
"ViT-L/14" ~ "L/14",
"ViT-H/14" ~ "H/14",
"ImageBind" ~ "IB"
),
model = factor(model, levels=c("B/32","L/14","H/14","IB"))
) %>%
ggplot(aes(x = model, y = probability)) +
stat_summary(aes(fill = match), fun="mean", geom="bar", position="dodge") +
stat_summary(aes(fill = match), fun.data="mean_cl_boot", geom="errorbar", position=position_dodge(width=0.9), width=0.2) +
facet_wrap(~dataset, labeller = labeller(dataset = custom_labeller)) +
theme_minimal(base_size = 16) +  # Use theme_bw with increased base font size
scale_fill_manual(values = c("match" = "#1C73C2CC", "mismatch" = "#D32F2FCC")) +  # Custom colors
theme(
legend.position = "bottom",
axis.title = element_text(size = 18),  # Increase axis title size
axis.text = element_text(size = 16),  # Increase axis text size
axis.text.x = element_text(size = 16),  # Increase axis text size
strip.text = element_markdown()
) +
geom_text(data=ttest_summary, aes(label = signif_star, y = 0.78), vjust = -1, size=6, fontface="plain", color="#222222") +
coord_cartesian(ylim=c(0, 0.85)) +
labs(x = "Model", y = "Probability", fill = "Match")
ggsave("../manuscript/figures/results.pdf", width = 9, height=5, device="pdf")
# Plot probability vs match for each model, faceted by dataset
data_with_signif %>%
mutate(
model = case_match(
model,
"ViT-B/32" ~ "B/32",
"ViT-L/14" ~ "L/14",
"ViT-H/14" ~ "H/14",
"ImageBind" ~ "IB"
),
model = factor(model, levels=c("B/32","L/14","H/14","IB"))
) %>%
ggplot(aes(x = model, y = probability)) +
stat_summary(aes(fill = match), fun="mean", geom="bar", position="dodge") +
stat_summary(aes(fill = match), fun.data="mean_cl_boot", geom="errorbar", position=position_dodge(width=0.9), width=0.2) +
facet_wrap(~dataset, labeller = labeller(dataset = custom_labeller)) +
theme_minimal(base_size = 16) +  # Use theme_bw with increased base font size
scale_fill_manual(values = c("match" = "#1C73C2CC", "mismatch" = "#D32F2FCC")) +  # Custom colors
theme(
legend.position = "bottom",
axis.title = element_text(size = 18),  # Increase axis title size
axis.text = element_text(size = 16),  # Increase axis text size
axis.text.x = element_text(size = 16),  # Increase axis text size
strip.text = element_markdown()
) +
geom_text(data=ttest_summary, aes(label = signif_star, y = y), vjust = -1, size=6, fontface="plain", color="#222222") +
coord_cartesian(ylim=c(0, 0.85)) +
labs(x = "Model", y = "Probability", fill = "Match")
ttest_summary <- ttest_summary %>%
# mutate(
#   model = case_match(
#     model,
#     "ViT-B/32" ~ "B/32",
#     "ViT-L/14" ~ "L/14",
#     "ViT-H/14" ~ "H/14",
#     "ImageBind" ~ "IB"
#   ),
#   model = factor(model, levels=c("B/32","L/14","H/14","IB")),
y = case_when(
p_value < 0.05 ~ 0.75,
T ~ 0.8
)
ttest_summary <- ttest_summary %>%
mutate(
#   model = case_match(
#     model,
#     "ViT-B/32" ~ "B/32",
#     "ViT-L/14" ~ "L/14",
#     "ViT-H/14" ~ "H/14",
#     "ImageBind" ~ "IB"
#   ),
#   model = factor(model, levels=c("B/32","L/14","H/14","IB")),
y = case_when(
p_value < 0.05 ~ 0.75,
T ~ 0.8
)
)
# Plot probability vs match for each model, faceted by dataset
data_with_signif %>%
mutate(
model = case_match(
model,
"ViT-B/32" ~ "B/32",
"ViT-L/14" ~ "L/14",
"ViT-H/14" ~ "H/14",
"ImageBind" ~ "IB"
),
model = factor(model, levels=c("B/32","L/14","H/14","IB"))
) %>%
ggplot(aes(x = model, y = probability)) +
stat_summary(aes(fill = match), fun="mean", geom="bar", position="dodge") +
stat_summary(aes(fill = match), fun.data="mean_cl_boot", geom="errorbar", position=position_dodge(width=0.9), width=0.2) +
facet_wrap(~dataset, labeller = labeller(dataset = custom_labeller)) +
theme_minimal(base_size = 16) +  # Use theme_bw with increased base font size
scale_fill_manual(values = c("match" = "#1C73C2CC", "mismatch" = "#D32F2FCC")) +  # Custom colors
theme(
legend.position = "bottom",
axis.title = element_text(size = 18),  # Increase axis title size
axis.text = element_text(size = 16),  # Increase axis text size
axis.text.x = element_text(size = 16),  # Increase axis text size
strip.text = element_markdown()
) +
geom_text(data=ttest_summary, aes(label = signif_star, y = y), vjust = -1, size=6, fontface="plain", color="#222222") +
coord_cartesian(ylim=c(0, 0.85)) +
labs(x = "Model", y = "Probability", fill = "Match")
ggsave("../manuscript/figures/results.pdf", width = 9, height=5, device="pdf")
ttest_summary <- ttest_summary %>%
mutate(
#   model = case_match(
#     model,
#     "ViT-B/32" ~ "B/32",
#     "ViT-L/14" ~ "L/14",
#     "ViT-H/14" ~ "H/14",
#     "ImageBind" ~ "IB"
#   ),
#   model = factor(model, levels=c("B/32","L/14","H/14","IB")),
y = case_when(
p_value < 0.05 ~ 0.75,
T ~ 0.78
)
)
# Plot probability vs match for each model, faceted by dataset
data_with_signif %>%
mutate(
model = case_match(
model,
"ViT-B/32" ~ "B/32",
"ViT-L/14" ~ "L/14",
"ViT-H/14" ~ "H/14",
"ImageBind" ~ "IB"
),
model = factor(model, levels=c("B/32","L/14","H/14","IB"))
) %>%
ggplot(aes(x = model, y = probability)) +
stat_summary(aes(fill = match), fun="mean", geom="bar", position="dodge") +
stat_summary(aes(fill = match), fun.data="mean_cl_boot", geom="errorbar", position=position_dodge(width=0.9), width=0.2) +
facet_wrap(~dataset, labeller = labeller(dataset = custom_labeller)) +
theme_minimal(base_size = 16) +  # Use theme_bw with increased base font size
scale_fill_manual(values = c("match" = "#1C73C2CC", "mismatch" = "#D32F2FCC")) +  # Custom colors
theme(
legend.position = "bottom",
axis.title = element_text(size = 18),  # Increase axis title size
axis.text = element_text(size = 16),  # Increase axis text size
axis.text.x = element_text(size = 16),  # Increase axis text size
strip.text = element_markdown()
) +
geom_text(data=ttest_summary, aes(label = signif_star, y = y), vjust = -1, size=6, fontface="plain", color="#222222") +
coord_cartesian(ylim=c(0, 0.85)) +
labs(x = "Model", y = "Probability", fill = "Match")
ggsave("../manuscript/figures/results.pdf", width = 9, height=5, device="pdf")
ttest_summary <- ttest_summary %>%
mutate(
#   model = case_match(
#     model,
#     "ViT-B/32" ~ "B/32",
#     "ViT-L/14" ~ "L/14",
#     "ViT-H/14" ~ "H/14",
#     "ImageBind" ~ "IB"
#   ),
#   model = factor(model, levels=c("B/32","L/14","H/14","IB")),
y = case_when(
p_value < 0.05 ~ 0.75,
T ~ 0.75
)
)
# Plot probability vs match for each model, faceted by dataset
data_with_signif %>%
mutate(
model = case_match(
model,
"ViT-B/32" ~ "B/32",
"ViT-L/14" ~ "L/14",
"ViT-H/14" ~ "H/14",
"ImageBind" ~ "IB"
),
model = factor(model, levels=c("B/32","L/14","H/14","IB"))
) %>%
ggplot(aes(x = model, y = probability)) +
stat_summary(aes(fill = match), fun="mean", geom="bar", position="dodge") +
stat_summary(aes(fill = match), fun.data="mean_cl_boot", geom="errorbar", position=position_dodge(width=0.9), width=0.2) +
facet_wrap(~dataset, labeller = labeller(dataset = custom_labeller)) +
theme_minimal(base_size = 16) +  # Use theme_bw with increased base font size
scale_fill_manual(values = c("match" = "#1C73C2CC", "mismatch" = "#D32F2FCC")) +  # Custom colors
theme(
legend.position = "bottom",
axis.title = element_text(size = 18),  # Increase axis title size
axis.text = element_text(size = 16),  # Increase axis text size
axis.text.x = element_text(size = 16),  # Increase axis text size
strip.text = element_markdown()
) +
geom_text(data=ttest_summary, aes(label = signif_star, y = y), vjust = -1, size=6, fontface="plain", color="#222222") +
coord_cartesian(ylim=c(0, 0.85)) +
labs(x = "Model", y = "Probability", fill = "Match")
ggsave("../manuscript/figures/results.pdf", width = 9, height=5, device="pdf")
ttest_summary <- ttest_summary %>%
mutate(
#   model = case_match(
#     model,
#     "ViT-B/32" ~ "B/32",
#     "ViT-L/14" ~ "L/14",
#     "ViT-H/14" ~ "H/14",
#     "ImageBind" ~ "IB"
#   ),
#   model = factor(model, levels=c("B/32","L/14","H/14","IB")),
y = case_when(
p_value < 0.05 ~ 0.75,
T ~ 0.77
)
)
# Plot probability vs match for each model, faceted by dataset
data_with_signif %>%
mutate(
model = case_match(
model,
"ViT-B/32" ~ "B/32",
"ViT-L/14" ~ "L/14",
"ViT-H/14" ~ "H/14",
"ImageBind" ~ "IB"
),
model = factor(model, levels=c("B/32","L/14","H/14","IB"))
) %>%
ggplot(aes(x = model, y = probability)) +
stat_summary(aes(fill = match), fun="mean", geom="bar", position="dodge") +
stat_summary(aes(fill = match), fun.data="mean_cl_boot", geom="errorbar", position=position_dodge(width=0.9), width=0.2) +
facet_wrap(~dataset, labeller = labeller(dataset = custom_labeller)) +
theme_minimal(base_size = 16) +  # Use theme_bw with increased base font size
scale_fill_manual(values = c("match" = "#1C73C2CC", "mismatch" = "#D32F2FCC")) +  # Custom colors
theme(
legend.position = "bottom",
axis.title = element_text(size = 18),  # Increase axis title size
axis.text = element_text(size = 16),  # Increase axis text size
axis.text.x = element_text(size = 16),  # Increase axis text size
strip.text = element_markdown()
) +
geom_text(data=ttest_summary, aes(label = signif_star, y = y), vjust = -1, size=6, fontface="plain", color="#222222") +
coord_cartesian(ylim=c(0, 0.85)) +
labs(x = "Model", y = "Probability", fill = "Match")
ggsave("../manuscript/figures/results.pdf", width = 9, height=5, device="pdf")
# Plot probability vs match for each model, faceted by dataset
data_with_signif %>%
mutate(
model = case_match(
model,
"ViT-B/32" ~ "B/32",
"ViT-L/14" ~ "L/14",
"ViT-H/14" ~ "H/14",
"ImageBind" ~ "IB"
),
model = factor(model, levels=c("B/32","L/14","H/14","IB")),
match = case_match(
"match" ~ "Match",
"mismatch" ~ "Mismatch"
)
) %>%
ggplot(aes(x = model, y = probability)) +
stat_summary(aes(fill = match), fun="mean", geom="bar", position="dodge") +
stat_summary(aes(fill = match), fun.data="mean_cl_boot", geom="errorbar", position=position_dodge(width=0.9), width=0.2) +
facet_wrap(~dataset, labeller = labeller(dataset = custom_labeller)) +
theme_minimal(base_size = 16) +  # Use theme_bw with increased base font size
scale_fill_manual(values = c("match" = "#1C73C2CC", "mismatch" = "#D32F2FCC")) +  # Custom colors
theme(
legend.position = "bottom",
axis.title = element_text(size = 18),  # Increase axis title size
axis.text = element_text(size = 16),  # Increase axis text size
axis.text.x = element_text(size = 16),  # Increase axis text size
strip.text = element_markdown()
) +
geom_text(data=ttest_summary, aes(label = signif_star, y = y), vjust = -1, size=6, fontface="plain", color="#222222") +
coord_cartesian(ylim=c(0, 0.85)) +
labs(x = "Model", y = "Probability", fill = "Match")
# Plot probability vs match for each model, faceted by dataset
data_with_signif %>%
mutate(
model = case_match(
model,
"ViT-B/32" ~ "B/32",
"ViT-L/14" ~ "L/14",
"ViT-H/14" ~ "H/14",
"ImageBind" ~ "IB"
),
model = factor(model, levels=c("B/32","L/14","H/14","IB")),
match = case_match(match,
"match" ~ "Match",
"mismatch" ~ "Mismatch"
)
) %>%
ggplot(aes(x = model, y = probability)) +
stat_summary(aes(fill = match), fun="mean", geom="bar", position="dodge") +
stat_summary(aes(fill = match), fun.data="mean_cl_boot", geom="errorbar", position=position_dodge(width=0.9), width=0.2) +
facet_wrap(~dataset, labeller = labeller(dataset = custom_labeller)) +
theme_minimal(base_size = 16) +  # Use theme_bw with increased base font size
scale_fill_manual(values = c("match" = "#1C73C2CC", "mismatch" = "#D32F2FCC")) +  # Custom colors
theme(
legend.position = "bottom",
axis.title = element_text(size = 18),  # Increase axis title size
axis.text = element_text(size = 16),  # Increase axis text size
axis.text.x = element_text(size = 16),  # Increase axis text size
strip.text = element_markdown()
) +
geom_text(data=ttest_summary, aes(label = signif_star, y = y), vjust = -1, size=6, fontface="plain", color="#222222") +
coord_cartesian(ylim=c(0, 0.85)) +
labs(x = "Model", y = "Probability", fill = "Match")
# Plot probability vs match for each model, faceted by dataset
data_with_signif %>%
mutate(
model = case_match(
model,
"ViT-B/32" ~ "B/32",
"ViT-L/14" ~ "L/14",
"ViT-H/14" ~ "H/14",
"ImageBind" ~ "IB"
),
model = factor(model, levels=c("B/32","L/14","H/14","IB")),
match = case_match(match,
"match" ~ "Match",
"mismatch" ~ "Mismatch"
)
) %>%
ggplot(aes(x = model, y = probability)) +
stat_summary(aes(fill = match), fun="mean", geom="bar", position="dodge") +
stat_summary(aes(fill = match), fun.data="mean_cl_boot", geom="errorbar", position=position_dodge(width=0.9), width=0.2) +
facet_wrap(~dataset, labeller = labeller(dataset = custom_labeller)) +
theme_minimal(base_size = 16) +  # Use theme_bw with increased base font size
scale_fill_manual(values = c("Match" = "#1C73C2CC", "Mismatch" = "#D32F2FCC")) +  # Custom colors
theme(
legend.position = "bottom",
axis.title = element_text(size = 18),  # Increase axis title size
axis.text = element_text(size = 16),  # Increase axis text size
axis.text.x = element_text(size = 16),  # Increase axis text size
strip.text = element_markdown()
) +
geom_text(data=ttest_summary, aes(label = signif_star, y = y), vjust = -1, size=6, fontface="plain", color="#222222") +
coord_cartesian(ylim=c(0, 0.85)) +
labs(x = "Model", y = "Probability", fill = "Match")
ggsave("../manuscript/figures/results.pdf", width = 9, height=5, device="pdf")
latex_table <- xtable(
pivoted_data,
caption="p-values from t-tests comparing matching vs mismatching visual features in sentences and images for various models. Values in bold denote significance (p < 0.05). All models except ViT-B/32 show a significant effect for Shape. ViT-H/14 and ImageBind both show significant effects for Color. None of the models show an effect of Orientation.",
align = c("l", "l", "r", "r", "r")
)
print(latex_table,
type = "latex",
hline.after = c(-1, 0, nrow(pivoted_data)),
include.rownames = FALSE,
sanitize.text.function = identity
)
pivoted_data <- ttest_summary %>%
mutate(
formatted_p = case_when(
p_value < 0.001 ~ "\\textbf{<0.001}",
p_value < 0.05 ~ paste0("\\textbf{", formatC(p_value, format = "f", digits = 3), "}"),
TRUE ~ formatC(p_value, format = "f", digits = 3)
),
dataset = recode(dataset,
pecher2006="Shape",
muraki2021="Orientation",
connell2007="Color"
)
) %>%
pivot_wider(names_from = dataset, values_from = formatted_p, id_cols = model) %>%
arrange(model) %>%
rename(
model="Model"
) %>%
select(Model, Shape, Color, Orientation)
pivoted_data <- ttest_summary %>%
mutate(
formatted_p = case_when(
p_value < 0.001 ~ "\\textbf{<0.001}",
p_value < 0.05 ~ paste0("\\textbf{", formatC(p_value, format = "f", digits = 3), "}"),
TRUE ~ formatC(p_value, format = "f", digits = 3)
),
dataset = recode(dataset,
pecher2006="Shape",
muraki2021="Orientation",
connell2007="Color"
)
) %>%
pivot_wider(names_from = dataset, values_from = formatted_p, id_cols = model) %>%
arrange(model) %>%
rename(
Model=model
) %>%
select(Model, Shape, Color, Orientation)
pivoted_data
# Initialize empty data frame to store summarized results
ttest_summary <- data.frame()
# Loop through each unique combination of model and dataset
for (model_name in unique(data$model)) {
for (dataset_name in unique(data$dataset)) {
# Subset the data
subset_data <- data %>%
filter(model == model_name, dataset == dataset_name)
# Run t-test
t_result <- t.test(probability ~ match, data = subset_data)
# Store the summarized t-test result in the data frame
ttest_summary <- rbind(ttest_summary, data.frame(
model = model_name,
dataset = dataset_name,
t_value = t_result$statistic,
p_value = t_result$p.value,
df = t_result$parameter
))
}
}
# View the summarized results
ttest_summary <- ttest_summary %>%
mutate(
model = factor(model, levels=c("ViT-B/32", "ViT-L/14", "ViT-H/14", "ImageBind")),
dataset = factor(dataset, levels=c("Shape", "Color", "Orientation"))
)
ttest_summary
pivoted_data <- ttest_summary %>%
mutate(
formatted_p = case_when(
p_value < 0.001 ~ "\\textbf{<0.001}",
p_value < 0.05 ~ paste0("\\textbf{", formatC(p_value, format = "f", digits = 3), "}"),
TRUE ~ formatC(p_value, format = "f", digits = 3)
),
dataset = recode(dataset,
pecher2006="Shape",
muraki2021="Orientation",
connell2007="Color"
)
) %>%
pivot_wider(names_from = dataset, values_from = formatted_p, id_cols = model) %>%
arrange(model) %>%
rename(
Model=model
) %>%
select(Model, Shape, Color, Orientation)
pivoted_data
latex_table <- xtable(
pivoted_data,
caption="p-values from t-tests comparing matching vs mismatching visual features in sentences and images for various models. Values in bold denote significance (p < 0.05). All models except ViT-B/32 show a significant effect for Shape. ViT-H/14 and ImageBind both show significant effects for Color. None of the models show an effect of Orientation.",
align = c("l", "l", "r", "r", "r")
)
print(latex_table,
type = "latex",
hline.after = c(-1, 0, nrow(pivoted_data)),
include.rownames = FALSE,
sanitize.text.function = identity
)
ttest_summary
